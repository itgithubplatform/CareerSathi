import { authOptions } from "@/lib/auth"
import { ExpiringCache } from "@/lib/ExpiringCache"
import { askVertex } from "@/lib/vertex"
import { getServerSession } from "next-auth"
import { NextResponse } from "next/server"

export async function POST(req:Request) {
    try {
        const data = await req.json()
        const text = data.text as string;
        if (!text) {
            return NextResponse.json({ error: "No text provided" }, { status: 400 })        
        }
        const session = await getServerSession(authOptions)
        if (!session?.user?.id) {
            return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
        }
        if (ExpiringCache.getInstance().get<string>(`${session.user.id}-${text.trim()}`)) {
            const cachedResponse = ExpiringCache.getInstance().get<string>(`${session.user.id}-${text.trim()}`)
            return NextResponse.json({ text: cachedResponse }, { status: 200 })
        }
 const prompt = `
You are an expert AI mentor and learning guide. A student needs a clear, encouraging, and actionable plan for the following topic.

Topic: "${text}"

Your task is to generate a concise, step-by-step guide for this topic. The guide must be easy to understand and visually scannable for an app.

You MUST structure your response *only* as a single string using the following Markdown format. Do NOT include any other text or wrappers:

## 💡 **What is "Topic(which will be generated by you ref:${text}"?**

(Make this a punchy, 3-4 line intro. Focus on the career-linked, problem-solving mindset, not just syntax.
Example: "This isn't just about syntax—it’s about learning the language that powers everything from AI to web apps, turning you from a beginner into a real project-builder.")

## 🚀 **How to Achieve It (The Plan)**

(Provide a bulleted or numbered list of concrete, actionable steps. 
**You MUST break the plan into logical sub-stages using \`###\` subheadings** (e.g., \`### Week 1: The Basics\`).

**For each sub-stage, you MUST include:**
1.  A "Why this matters" blurb, **formatted as a Markdown blockquote** (e.g., \`> *Why this matters: This is how professionals organize large projects and sets you apart.*\`).
2.  A tangible outcome line. **It MUST be on its own line.** (e.g.,
    \`🎯 **Outcome:** You can write small functional programs with decisions and loops.\`)
3.  **In the final project-focused stage,** you MUST add a sentence about portfolio relevance (e.g., \`Each project you build is a portfolio piece to show recruiters.\`).)

## 📚 **How to Learn It (The Knowledge)**

(This is a 'How to Learn' guide, not just a knowledge list. For each key concept, provide a 1-2 sentence **actionable learning strategy**. You MUST guide them on *what* to search for and *where*.
**CRITICAL:** You MUST use bullet points and **wrap all technical terms, keywords, and function names in inline code backticks (\`...\`)**.

Good Example:
* \`if/else statements\`: Read the official Python documentation on "control flow." Then, search YouTube for "Python if/else practice problems" to build muscle memory.
* \`useState Hook\`: Start with the official React docs for \`useState\`. Then, find a short tutorial on "React hooks explained" to see it in a real project.

Bad Example:
* \`if/else statements\`)

## 🗓️ **A Realistic Timeline**

(Provide a short, empowering, and intense timeline.
Example: "A dedicated student can confidently master this in 3-4 focused weeks. The pace is intentionally intense—consistent pressure builds true skill, not comfort.")

---
**CRITICAL FORMATTING RULES:**
1.  Your entire response MUST be a single string.
2.  You MUST use Markdown for formatting (##, ###, *, **, \`, \>, _italics_).
3.  You must NOT wrap your response in \`\`\`markdown, \`\`\`, or any other code block. Start directly with the first \`## \` heading.
4.  You MUST generate this plan *only* from your internal knowledge. Do NOT use any external tools or search functions.
`;
        const res = await askVertex(prompt)
        ExpiringCache.getInstance().set<string>(`${session.user.id}-${text.trim()}`, res);
        return NextResponse.json({text: res}, { status: 200 })
    } catch (error) {
        return NextResponse.json({ error: "Internal server error" }, { status: 500 })
    }
}